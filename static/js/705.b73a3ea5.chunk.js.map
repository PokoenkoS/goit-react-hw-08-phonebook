{"version":3,"file":"static/js/705.b73a3ea5.chunk.js","mappings":"wPAsCA,EA/BmB,WAGjB,IAAMA,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBC,GAAWC,EAAAA,EAAAA,MAGZ,OACH,0BAEA,wBACCJ,EAASK,KAAI,SAACC,GACb,OACF,0BACCA,EAAQC,KADT,IACgBD,EAAQE,QAExB,SAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,WAAYC,QAAU,kBAAKT,GAASU,EAAAA,EAAAA,IAAcP,EAAQQ,IAApC,EAApD,sBAHSR,EAAQQ,GAMhB,OAIJ,E,oBCmDD,EAxEa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOR,EAAP,KAAaS,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOP,EAAP,KAAeS,EAAf,KAEMd,GAAWC,EAAAA,EAAAA,MACXJ,GAAWC,EAAAA,EAAAA,IAAYiB,EAAAA,IAGvBC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,OAAQf,GACJ,IAAK,OACDS,EAAQM,GACR,MACJ,IAAK,SACDL,EAAUK,GACV,MACJ,QACI,OAEX,EAaQC,EAAY,WACjBP,EAAQ,IACRC,EAAU,GACb,EAEG,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAASO,SAlBS,SAACJ,GAGvB,GAFAA,EAAEK,iBAEEzB,EAAS0B,MAAK,SAAAC,GAAI,OAAIA,EAAKpB,OAAQA,GAClCoB,EAAKnB,SAAWA,CADC,IAEpB,OAAOoB,MAAK,UAAKrB,EAAL,YAAaC,EAAb,yBAEhBL,GAAS0B,EAAAA,EAAAA,IAAW,CAACtB,KAAAA,EAAMC,OAAAA,KAC1Be,GAEC,EAQI,WAEA,UAAC,KAAD,mBACD,kBACAb,KAAK,OACLH,KAAK,OACLe,MAASf,EACTuB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUd,QAGZ,UAAC,KAAD,sBACI,kBACFT,KAAK,MACLH,KAAK,SACLe,MAASd,EACTsB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUd,QAGZ,SAACV,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,WAA9B,6BAKJ,E,UCxDD,EAjBe,WACX,IAAMR,GAAWC,EAAAA,EAAAA,MACX8B,GAASjC,EAAAA,EAAAA,IAAYkC,EAAAA,IAO3B,OAEJ,kBAAOzB,KAAK,OAAOY,MAAOY,EAAQ3B,KAAK,SAAU0B,SAP5B,SAACb,GAElBjB,GAASiC,EAAAA,EAAAA,GAAchB,EAAEC,cAAcC,MAAMe,eAC/C,GAQD,E,UCnBM,SAASC,IACZ,OACJ,SAAC,KAAD,CACEC,OAAO,KACPC,MAAM,KACNC,MAAM,UACNC,UAAU,kBACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,GAGV,CCJA,IA+BD,EA/BiB,WACb,IAAM1C,GAAWC,EAAAA,EAAAA,MACX0C,GAAa7C,EAAAA,EAAAA,IAAY8C,EAAAA,IACzBC,GAAY/C,EAAAA,EAAAA,IAAYgD,EAAAA,IACxBC,GAAYjD,EAAAA,EAAAA,IAAYkD,EAAAA,IAQ9B,OANAC,EAAAA,EAAAA,YAAU,WACFF,GACA/C,GAASkD,EAAAA,EAAAA,MAEhB,GAAC,CAAClD,EAAU+C,KAGT,gCACCJ,IAAcI,IACf,+BACA,UAAC,KAAD,YAEA,uCACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,SAKCF,IAAY,SAACV,EAAD,MAGpB,C","sources":["components/ContactList.js","components/Form.js","components/Filter.js","components/Loader.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import React from \"react\";\nimport PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"redux/Phonebook/operations\";\nimport { selectFilteredContacts } from \"redux/Phonebook/selectors\";\nimport Button from '@mui/material/Button';\n\nconst ContactList =()=> {\n\n\n  const contacts = useSelector(selectFilteredContacts);\n \n  const dispatch = useDispatch();\n  \n\n       return (\n    <div>\n    \n    <ul>\n    {contacts.map((contact) =>{\n      return (\n    <li key={contact.id}>\n    {contact.name}:{contact.number}\n    {/* <button type=\"submit\" onClick={()=> dispatch(deleteContact(contact.id))}> Delete</button> */}\n    <Button type=\"submit\" variant=\"outlined\"  onClick ={()=> dispatch(deleteContact(contact.id))}>Delete</Button> \n    </li>\n    )\n    })}\n    </ul>\n  </div> \n)\n};\n\n\nContactList.propTypes = {\n  contacts: PropTypes.array,\n}\n\nexport default ContactList;\n  ","import React from \"react\";\n\nimport {  FormDiv, FormLabel, MainDiv } from \"./Main.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/Phonebook/operations\";\nimport { selectContacts } from \"redux/Phonebook/selectors\";\nimport { useState } from \"react\";\nimport Button from '@mui/material/Button';\n\n\n const Form =()=>{\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n        case \"name\":\n            setName(value);\n            break;\n        case \"number\":\n            setNumber(value);\n            break;\n        default:\n            return;\n    };\n};\n\n   const handeleSubmite = (e) =>{\n    e.preventDefault();\n    \n    if (contacts.find(item => item.name ===name\n      || item.number === number )) {\n      return alert (`${name}:${number} already in contacts` )\n    }\n  dispatch(addContact({name, number}));\n   resetForm();\n\n   }\n   const resetForm = () => {\n    setName(\"\");\n    setNumber(\"\");\n};\n\n    return(\n      <MainDiv>\n        <FormDiv onSubmit={handeleSubmite}\n        >\n        <FormLabel>Name\n       <input\n       type=\"text\"\n       name=\"name\"\n       value = {name}\n       pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n       title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n       required\n       onChange={handleInputChange}\n     /> \n     </FormLabel>\n     <FormLabel> Number\n         <input\n       type=\"tel\"\n       name=\"number\"\n       value = {number}\n       pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n       title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n       required\n       onChange={handleInputChange}\n       /></FormLabel>\n     {/* <Button type=\"submit\">Add contact</Button>   */}\n     <Button type=\"submit\" variant=\"outlined\">Add contact</Button> \n       </FormDiv>\n       </MainDiv>\n    \n)\n}\n\n\nexport default Form;","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { filterContact } from \"redux/Phonebook/filterSlice\";\nimport { selectFilter } from \"redux/Phonebook/selectors\";\n\n\nconst Filter = () =>{\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n\n const handleFifter =(e)=> {\n   \n    dispatch(filterContact(e.currentTarget.value.toLowerCase()))\n }\n   \n    return (\n        \n<input type=\"text\" value={filter} name=\"filter\"  onChange={handleFifter} />\n\n    )\n\n}\n\nexport default Filter;","import { Circles } from  'react-loader-spinner'\n\nexport function Loader() {\n    return (\n<Circles\n  height=\"80\"\n  width=\"80\"\n  color=\"#4fa94d\"\n  ariaLabel=\"circles-loading\"\n  wrapperStyle={{}}\n  wrapperClass=\"\"\n  visible={true}\n/>\n    )\n}\n","import { useDispatch, useSelector } from \"react-redux\"\nimport {selectIsLoading, selectIsLoggedIn, selectIsRefreshing } from '../../redux/Phonebook/selectors';\nimport { useEffect } from \"react\";\nimport ContactList from \"components/ContactList\";\nimport Form from \"../../components/Form\";\nimport Filter from \"../../components/Filter\";\nimport { Loader } from \"components/Loader\";\nimport { fetchContacts } from \"redux/Phonebook/operations\";\nimport { MainDiv } from \"components/Main.styled\";\n\n const Contacts =() => {\n    const dispatch = useDispatch();\n    const isLoggedIn = useSelector(selectIsLoggedIn);\n    const isLoading = useSelector(selectIsLoading);\n    const isRefresh = useSelector(selectIsRefreshing);\n\n    useEffect(()=> {\n        if(!isRefresh){\n            dispatch(fetchContacts());\n        }\n    },[dispatch, isRefresh]);\n\n    return (\n        <>\n        {isLoggedIn&& !isRefresh &&\n        <>\n        <MainDiv>\n            \n        <h1>Phonebook</h1>\n        <Form/>\n        <h2>Contacts</h2>\n        <Filter/>\n        <ContactList/>\n        </MainDiv>\n        </>\n       \n        }\n        {isLoading&& <Loader/>}\n        </>\n    )\n}\nexport default Contacts;"],"names":["contacts","useSelector","selectFilteredContacts","dispatch","useDispatch","map","contact","name","number","Button","type","variant","onClick","deleteContact","id","useState","setName","setNumber","selectContacts","handleInputChange","e","currentTarget","value","resetForm","onSubmit","preventDefault","find","item","alert","addContact","pattern","title","required","onChange","filter","selectFilter","filterContact","toLowerCase","Loader","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","isLoggedIn","selectIsLoggedIn","isLoading","selectIsLoading","isRefresh","selectIsRefreshing","useEffect","fetchContacts"],"sourceRoot":""}